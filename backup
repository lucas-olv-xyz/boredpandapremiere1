function randomizeRowsByColors1() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

  // Lista das células que contêm as cores de interesse
  const colorCells = [
    "A2",
    "A3",
    "A4",
    "A5",
    "A6",
    "A7",
    "A8",
    "A9",
    "A10",
    "A11",
  ]; // Adicione mais células conforme necessário

  colorCells.forEach((cell) => {
    randomizeRowsByColor(sheet, sheet.getRange(cell).getBackground());
  });
}

function randomizeRowsByColor(sheet, targetColor) {
  // Define o intervalo para procurar as células com a mesma cor (abaixo da linha 11)
  const rangeToCheck = sheet.getRange("A12:A");
  const backgrounds = rangeToCheck.getBackgrounds();

  // Coleta as linhas que têm a mesma cor de fundo que a célula fornecida
  const rowsToRandomize = [];
  for (let i = 0; i < backgrounds.length; i++) {
    if (backgrounds[i][0] === targetColor) {
      rowsToRandomize.push(i + 12); // +12 para corresponder à linha real na planilha
    }
  }

  // Se não houver linhas para randomizar, saia da função
  if (rowsToRandomize.length === 0) return;

  // Seleciona o intervalo das linhas para randomizar (A até H)
  const rangesToRandomize = rowsToRandomize.map((row) => `A${row}:H${row}`);
  const rangeList = sheet.getRangeList(rangesToRandomize);

  // Aplica randomize para as linhas selecionadas
  const values = rangeList.getRanges().map((range) => range.getValues());

  // Embaralha as linhas selecionadas
  const shuffledValues = shuffleArray(values);

  // Escreve os valores embaralhados de volta
  shuffledValues.forEach((rowValues, index) => {
    sheet
      .getRange(rowsToRandomize[index], 1, 1, rowValues[0].length)
      .setValues(rowValues);
  });
}

// Função auxiliar para embaralhar um array
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

--------------------------

function concatenateValuesByColor() {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    
    // Define range
    var rangeB = sheet.getRange("B12:B"); // Column B starting from B12
    var valuesB = rangeB.getValues();
  
    var idList = [];
  
    // Extract and process the IDs from Column B
    for (var i = 0; i < valuesB.length; i++) {
      var cellValueB = valuesB[i][0];
      if (cellValueB) { // Skip empty cells
        var valueBeforeSpace = cellValueB.split(' ')[0]; // Get value before first space
        idList.push(valueBeforeSpace);
      }
    }
  
    // Concatenate IDs into a single string separated by commas
    var concatenatedIDs = idList.join(", ");
  
    // Output the concatenated string to cell B10
    sheet.getRange("B10").setValue(concatenatedIDs);
  }
  
  function onEdit(e) {
    var range = e.range;
  
    if (range.getColumn() === 2 && range.getRow() >= 12) { // Edit in column B starting from row 12
      concatenateValuesByColor(); // Run the concatenation function on any edit in column B
      var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
      sheet.getRange("B10").setBackground("#d4f8d4"); // Set background to light green for B10 after concatenation
    }
  }
  
  
  function triggerConcatenation() {
    concatenateValuesByColor(); // Call the main function
  }
  
  function exportToGoogleDoc() {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    var concatenatedIDs = sheet.getRange("B10").getValue();
    
    if (concatenatedIDs && concatenatedIDs !== "N/A") { // Only proceed if there's a valid result in B10
      var doc = DocumentApp.create("Exported Data");
      var body = doc.getBody();
      body.appendParagraph(concatenatedIDs);
      
      var docUrl = doc.getUrl();
      Logger.log("Google Doc created with URL: " + docUrl);
      
      // Display the document URL as a clickable link in a dialog
      var htmlOutput = HtmlService.createHtmlOutput('<a href="' + docUrl + '" target="_blank">Open the Google Doc</a>');
      SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Document Created');
    } else {
      SpreadsheetApp.getUi().alert('B10 is either empty or contains an invalid value.');
    }
  }
  
  function findAndOutputSpreadsheetURL() {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    var titleRow = 2; // Inicializa a linha para adicionar os títulos começando de A2
    
    // Limpa as células da coluna A (A2 até A8) antes de adicionar novos títulos
    sheet.getRange('A2:A8').clearContent();
  
    // Loop through rows 2 to 8
    for (var i = 2; i <= 8; i++) {
      // Get the value from column E of the current row
      var searchTerm = sheet.getRange('E' + i).getValue();
      
      // Check if the search term is not empty
      if (searchTerm) {
        // Create the search query for Google Drive
        var query = 'title contains "' + searchTerm + '" and mimeType = "application/vnd.google-apps.spreadsheet"';
        
        // Search for files in Google Drive
        var files = DriveApp.searchFiles(query);
        
        // Initialize the file URL and file name
        var fileUrl = '';
        var fileId = '';
        var fileName = '';
        
        // If files are found, get the URL, ID, and name of the first one
        if (files.hasNext()) {
          var file = files.next();
          fileUrl = file.getUrl();
          fileId = file.getId();
          fileName = file.getName();
          
          // Adiciona o nome do arquivo na coluna A (A2 até A8)
          if (titleRow <= 8) {
            sheet.getRange('A' + titleRow).setValue(fileName);
            titleRow++;
          }
        } else {
          fileName = 'No spreadsheet found with the name: ' + searchTerm;
        }
        
        // Output the result as a smart chip to column F of the current row
        if (fileId) {
          // Use setRichTextValue to insert the file URL and name
          var cell = sheet.getRange('F' + i);
          cell.setValue(fileName); // Set the file name first
          cell.setRichTextValue(SpreadsheetApp.newRichTextValue()
            .setText(fileName)
            .setLinkUrl(fileUrl)
            .build());
        } else {
          sheet.getRange('F' + i).setValue(fileName);
        }
      }
    }
  }
  
  function colorCellsByID() {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    
    // Get the IDs and their corresponding colors from column A (A2 to A7)
    var rangeA = sheet.getRange('A2:A7');
    var valuesA = rangeA.getValues();
    var backgroundsA = rangeA.getBackgrounds();
    
    var idColorMap = {};
  
    for (var i = 0; i < valuesA.length; i++) {
      var cellValueA = valuesA[i][0];
      if (cellValueA) { // Only process non-empty cells
        var id = cellValueA.split(' ')[0]; // Get value before the first space
        var color = backgroundsA[i][0];
        idColorMap[id] = color;
      }
    }
  
    // Get the range of column B starting from B12
    var rangeB = sheet.getRange("B12:B");
    var valuesB = rangeB.getValues();
    
    // Loop through column B and color the entire row from column A to column I according to the ID color map
    for (var i = 0; i < valuesB.length; i++) {
      var cellValueB = valuesB[i][0];
      if (cellValueB) {
        for (var id in idColorMap) {
          if (cellValueB.includes(id)) {
            sheet.getRange("A" + (i + 12) + ":I" + (i + 12)).setBackground(idColorMap[id]);
            break;
          }
        }
      }
    }
  }
  
  // Test function to ensure it's working
  function testColorCellsByID() {
    colorCellsByID();
  }
  
  
  //importar os dados das planilhas..
  function copyAllDataFromLinks1() {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const range = sheet.getRange("F2:F8"); // Intervalo dos links
    const cells = range.getRichTextValues(); // Obtém os valores ricos das células
    
    cells.forEach((cell, index) => {
      const link = cell[0].getLinkUrl(); // Obtém o link
      
      if (link) {
        Logger.log("Link encontrado na célula F" + (index + 2) + ": " + link);
        
        // Extrai o ID da planilha a partir do link
        const spreadsheetId = extractSpreadsheetId(link); 
        
        if (spreadsheetId) {
          Logger.log("ID da planilha encontrado: " + spreadsheetId);
          
          // Abre a planilha de destino
          const targetSpreadsheet = SpreadsheetApp.openById(spreadsheetId);
          
          // Acessa a aba "25%"
          const targetSheet = targetSpreadsheet.getSheetByName("25%");
          
          if (targetSheet) {
            const lastRow = targetSheet.getLastRow(); // Captura a última linha preenchida
            const data = targetSheet.getRange(3, 1, lastRow - 2, 9).getValues(); // Lê da coluna A (1) até a coluna I (9)
  
            Logger.log("Dados capturados: " + JSON.stringify(data));
            // Converte a coluna de duração para texto explícito (supondo que esteja na coluna H)
            data.forEach(row => {
              row[7] = formatDurationAsString(row[7]); // Coluna H
            });
  
            // Encontra a última linha preenchida na planilha atual
            const lastFilledRow = sheet.getLastRow();
            
            // Define o intervalo de destino para colar os dados
            const destinationRange = sheet.getRange(lastFilledRow + 1, 1, data.length, data[0].length);
            destinationRange.setValues(data);
          } else {
            Logger.log("A aba '25%' não foi encontrada para o link na célula F" + (index + 2));
          }
        } else {
          Logger.log("ID da planilha não encontrado no link na célula F" + (index + 2));
        }
      } else {
        Logger.log("Nenhum link encontrado na célula F" + (index + 2));
      }
    });
  }
  
  // Função para extrair o ID da planilha do link
  function extractSpreadsheetId(url) {
    const matches = url.match(/[-\w]{25,}/);
    return matches ? matches[0] : null;
  }
  
  // Função para converter a duração para uma string formatada
  function formatDurationAsString(duration) {
    if (duration instanceof Date) {
      const hours = ('0' + duration.getUTCHours()).slice(-2);
      const minutes = ('0' + duration.getUTCMinutes()).slice(-2);
      const seconds = ('0' + duration.getUTCSeconds()).slice(-2);
      return `${hours}:${minutes}:${seconds}.000`;
    }
    return duration;
  }
  "C:/Users/theel/Videos/premiere_test/watermark/watermark.png"

  function importFilesFromTXT() {
    try {
      var txtPath =
        "C:/Program Files (x86)/Common Files/Adobe/CEP/extensions/boredpanda/arquivos.txt"; // Caminho fixo do TXT
      var txtFile = new File(txtPath);
  
      if (!txtFile.exists) {
        return "❌ O arquivo TXT não foi encontrado: " + txtPath;
      }
  
      txtFile.open("r"); // Abre o arquivo no modo de leitura
      var filePaths = [];
  
      while (!txtFile.eof) {
        var line = txtFile.readln(); // Lê uma linha do TXT
  
        if (line && line.length > 0) {
          // Verifica se a linha não está vazia
          filePaths.push(line); // Adiciona ao array
        }
      }
      txtFile.close(); // Fecha o arquivo após a leitura
  
      if (filePaths.length === 0) {
        return "⚠️ O TXT está vazio ou não contém caminhos válidos.";
      }
  
      var project = app.project;
      var importedFiles = 0;
  
      for (var i = 0; i < filePaths.length; i++) {
        var file = new File(filePaths[i]);
        if (file.exists) {
          try {
            project.importFiles([file.fsName], true, project.rootItem, false);
            importedFiles++;
          } catch (e) {
            return "Erro ao importar: " + file.fsName;
          }
        } else {
          return "❌ Arquivo não encontrado: " + filePaths[i];
        }
      }
  
      return importedFiles + " arquivos importados diretamente para o projeto.";
    } catch (e) {
      return "Erro inesperado: " + e.toString();
    }
  }
  
  function addFilesToTimeline() {
    try {
      var txtPath =
        "C:/Program Files (x86)/Common Files/Adobe/CEP/extensions/boredpanda/arquivos.txt";
      var txtFile = new File(txtPath);
  
      if (!txtFile.exists) {
        return "❌ O arquivo TXT não foi encontrado: " + txtPath;
      }
  
      txtFile.open("r"); // Abre o arquivo no modo de leitura
      var filePaths = [];
  
      while (!txtFile.eof) {
        var line = txtFile.readln();
        if (line && line.length > 0) {
          filePaths.push(line); // Adiciona os caminhos ao array
        }
      }
      txtFile.close();
  
      if (filePaths.length === 0) {
        return "⚠️ O TXT está vazio ou não contém caminhos válidos.";
      }
  
      filePaths.reverse(); // 🔥 INVERTE A ORDEM PARA GARANTIR QUE SEJA LIDO DO TOPO PARA BAIXO 🔥
  
      var project = app.project;
      var sequence = project.activeSequence;
  
      if (!sequence) {
        return "❌ Nenhuma sequência ativa encontrada. Crie uma sequência primeiro.";
      }
  
      var videoTrack = sequence.videoTracks[0]; // Obtém a trilha de vídeo
      if (!videoTrack) {
        return "❌ Nenhuma trilha de vídeo disponível.";
      }
  
      var currentTime = sequence.getPlayerPosition(); // Obtém a posição atual na timeline
  
      for (var i = 0; i < filePaths.length; i++) {
        var clipName = filePaths[i].split("/").pop().split("\\").pop(); // Obtém apenas o nome do arquivo
        var item = findItemInProject(clipName);
  
        if (item) {
          try {
            videoTrack.insertClip(item, currentTime); // Adiciona o clipe à timeline na ordem certa
            currentTime += item.getOutPoint().seconds; // Move o cursor para depois do clipe
          } catch (e) {
            return "❌ Erro ao adicionar " + clipName + " à timeline.";
          }
        } else {
          return "❌ Arquivo não encontrado no projeto: " + clipName;
        }
      }
  
      return "✅ Arquivos adicionados à timeline na ordem correta.";
    } catch (e) {
      return "Erro inesperado: " + e.toString();
    }
  }
  
  // Função auxiliar para encontrar um arquivo pelo nome no projeto
  function findItemInProject(name) {
    var rootItem = app.project.rootItem;
    var numItems = rootItem.children.numItems;
    var matchedItems = [];
  
    for (var i = 0; i < numItems; i++) {
      var item = rootItem.children[i];
      if (item && item.name === name) {
        matchedItems.push(item); // Armazena todos os itens com o mesmo nome
      }
    }
  
    if (matchedItems.length > 0) {
      return matchedItems[0]; // Retorna o primeiro encontrado (garantindo a ordem do txt)
    }
  
    return null;
  }
  
  function saveFilePathsToTXT(filePaths) {
    try {
      var txtPath =
        "C:/Program Files (x86)/Common Files/Adobe/CEP/extensions/boredpanda/arquivos.txt"; // Caminho fixo
      var txtFile = new File(txtPath);
  
      if (!txtFile.open("w")) {
        // Abre o arquivo no modo escrita
        return "❌ Erro ao abrir o arquivo TXT para escrita.";
      }
  
      txtFile.write(filePaths.replace(/\n/g, "\r")); // Escreve os caminhos no arquivo
      txtFile.close();
  
      return "✅ Caminhos salvos com sucesso!";
    } catch (e) {
      return "❌ Erro inesperado: " + e.toString();
    }
  }
  
  function addTransitionsAbove() {
    try {
      var sequence = app.project.activeSequence;
      if (!sequence) {
        return "❌ Nenhuma sequência ativa encontrada. Crie uma sequência primeiro.";
      }
  
      var videoTracks = sequence.videoTracks;
      var numTracks = videoTracks.numTracks;
  
      // Criar uma trilha de vídeo acima da principal, se necessário
      var transitionTrack;
      if (numTracks < 2) {
        sequence.addVideoTrack();
        $.sleep(500); // 🔥 Delay para garantir que a trilha seja criada
        transitionTrack = sequence.videoTracks[1];
      } else {
        transitionTrack = videoTracks[1];
      }
  
      var primaryTrack = videoTracks[0]; // Primeira trilha onde estão os vídeos
      var numClips = primaryTrack.clips.numItems;
  
      if (numClips < 2) {
        return "⚠️ Não há clipes suficientes para adicionar transições.";
      }
  
      var transitionPath =
        "C:/Users/theel/Videos/premiere_test/transitions/A1.mov";
      var outroPath = "C:/Users/theel/Videos/premiere_test/transitions/outro.mp4";
  
      var transitionFile = new File(transitionPath);
      var outroFile = new File(outroPath);
  
      if (!transitionFile.exists) {
        return "❌ O arquivo de transição não foi encontrado: " + transitionPath;
      }
      if (!outroFile.exists) {
        return "❌ O arquivo 'Outro' não foi encontrado: " + outroPath;
      }
  
      // Importar os arquivos, se necessário
      var transitionItem = findOrImportFile("A1.mov", transitionFile);
      var outroItem = findOrImportFile("outro.mp4", outroFile);
  
      if (!transitionItem || !outroItem) {
        return "❌ Erro ao importar os arquivos.";
      }
  
      var currentTime = 0;
  
      // Adicionar transições entre os vídeos
      for (var i = 0; i < numClips - 1; i++) {
        var clip = primaryTrack.clips[i];
        var nextClip = primaryTrack.clips[i + 1];
  
        if (clip && nextClip) {
          var clipEnd = clip.end.seconds;
          var transitionDuration = transitionItem.getOutPoint().seconds;
  
          // Adiciona a transição na trilha acima, no meio entre os vídeos
          transitionTrack.insertClip(
            transitionItem,
            clipEnd - transitionDuration / 2
          );
        }
      }
  
      // 🔥 Agora adicionamos o "Outro" depois do último vídeo
      var lastClip = primaryTrack.clips[numClips - 1];
      if (lastClip) {
        var outroPosition = lastClip.end.seconds;
        transitionTrack.insertClip(outroItem, outroPosition);
      }
  
      return "✅ Transições adicionadas e 'Outro' colocado no final.";
    } catch (e) {
      return "Erro inesperado: " + e.toString();
    }
  }
  
  // 🔥 Função para encontrar ou importar um arquivo
  function findOrImportFile(fileName, fileObject) {
    var item = findItemInProject(fileName);
    if (!item) {
      app.project.importFiles(
        [fileObject.fsName],
        true,
        app.project.rootItem,
        false
      );
      $.sleep(500); // 🔥 Delay para garantir que a importação foi concluída
      item = findItemInProject(fileName);
    }
    return item;
  }
  
  // Função auxiliar para encontrar um arquivo no projeto
  function findItemInProject(name) {
    var rootItem = app.project.rootItem;
    var numItems = rootItem.children.numItems;
  
    for (var i = 0; i < numItems; i++) {
      var item = rootItem.children[i];
      if (item && item.name === name) {
        return item;
      }
    }
    return null;
  }
  
  function addSubscribeAndLike() {
    try {
      var sequence = app.project.activeSequence;
      if (!sequence) {
        return "❌ Nenhuma sequência ativa encontrada. Crie uma sequência primeiro.";
      }
  
      var videoTracks = sequence.videoTracks;
      var numTracks = videoTracks.numTracks;
  
      // Criar uma nova trilha de vídeo acima da principal, se necessário
      var overlayTrack;
      if (numTracks < 2) {
        sequence.addVideoTrack();
        $.sleep(500); // 🔥 Pequeno delay para garantir que a trilha seja criada
        overlayTrack = sequence.videoTracks[1];
      } else {
        overlayTrack = videoTracks[1];
      }
  
      var primaryTrack = videoTracks[0];
      var numClips = primaryTrack.clips.numItems;
  
      if (numClips < 2) {
        return "⚠️ Não há clipes suficientes para adicionar overlays.";
      }
  
      var subscribePath =
        "C:/Users/theel/Videos/premiere_test/like sub/Subscribe.mov";
      var likePath = "C:/Users/theel/Videos/premiere_test/like sub/Like.mov";
  
      var subscribeFile = new File(subscribePath);
      var likeFile = new File(likePath);
  
      if (!subscribeFile.exists || !likeFile.exists) {
        return "❌ Arquivos de overlay não encontrados.";
      }
  
      // 🔥 Agora importamos primeiro e só depois tentamos usar os arquivos
      var subscribeItem = findOrImportFile("Subscribe.mov", subscribeFile);
      var likeItem = findOrImportFile("Like.mov", likeFile);
  
      if (!subscribeItem || !likeItem) {
        return "❌ Erro ao importar os arquivos de overlay.";
      }
  
      var overlayIndex = 0;
  
      // Alternar entre Subscribe e Like nos vídeos certos
      for (var i = 0; i < numClips; i += 2) {
        var clip = primaryTrack.clips[i];
  
        if (clip) {
          var clipMiddle = clip.start.seconds + clip.duration.seconds * 0.75;
  
          // Alternar entre Subscribe e Like
          var overlayItem = overlayIndex % 2 === 0 ? subscribeItem : likeItem;
  
          try {
            overlayTrack.insertClip(overlayItem, clipMiddle);
          } catch (e) {
            return "❌ Erro ao adicionar overlay na timeline.";
          }
  
          overlayIndex++;
        }
      }
  
      return "✅ Overlays 'Inscreva-se' e 'Like' adicionados na trilha superior.";
    } catch (e) {
      return "Erro inesperado: " + e.toString();
    }
  }
  
  // 🔥 Função melhorada para encontrar ou importar um arquivo corretamente
  function findOrImportFile(fileName, fileObject) {
    var item = findItemInProject(fileName);
    if (!item) {
      app.project.importFiles(
        [fileObject.fsName],
        true,
        app.project.rootItem,
        false
      );
      $.sleep(500); // 🔥 Pequeno delay para garantir que a importação foi concluída
      item = findItemInProject(fileName);
    }
    return item;
  }
  
  // Função auxiliar para encontrar um arquivo pelo nome no projeto
  function findItemInProject(name) {
    var rootItem = app.project.rootItem;
    var numItems = rootItem.children.numItems;
  
    for (var i = 0; i < numItems; i++) {
      var item = rootItem.children[i];
      if (item && item.name === name) {
        return item;
      }
    }
    return null;
  }
  
  function addWatermark() {
    try {
      var sequence = app.project.activeSequence;
      if (!sequence) return "❌ Nenhuma sequência ativa.";
  
      var videoTracks = sequence.videoTracks;
      var numTracks = videoTracks.numTracks;
  
      // 🔥 Usar a Track 3 se existir, caso contrário, usar a última disponível
      var watermarkTrack;
      if (numTracks >= 3) {
        watermarkTrack = videoTracks[2]; // Track 3 (índice 2)
      } else {
        watermarkTrack = videoTracks[numTracks - 1]; // Última trilha disponível
      }
  
      var primaryTrack = videoTracks[0]; // Primeira trilha onde estão os vídeos
      var numClips = primaryTrack.clips.numItems;
  
      if (numClips < 1) {
        return "⚠️ Não há clipes suficientes para adicionar a Watermark.";
      }
  
      var watermarkPath =
        "C:/Users/theel/Videos/premiere_test/watermark/watermark.png";
      var watermarkFile = new File(watermarkPath);
  
      if (!watermarkFile.exists) {
        return "❌ Arquivo da Watermark não encontrado.";
      }
  
      // 🔥 Importar a Watermark se ainda não estiver no projeto
      var watermarkItem = findOrImportFile("watermark.png", watermarkFile);
  
      if (!watermarkItem) {
        return "❌ Erro ao importar a Watermark.";
      }
  
      // 🔥 Encontrar o primeiro e o último clipe da timeline
      var firstClip = primaryTrack.clips[0]; // Primeiro clipe
      var lastClip = primaryTrack.clips[numClips - 1]; // Último clipe (provavelmente o "Outro")
  
      if (!firstClip || !lastClip) {
        return "❌ Erro ao identificar início ou fim da Watermark.";
      }
  
      var startPosition = firstClip.start.seconds; // Começo do primeiro vídeo
      var endPosition = lastClip.end.seconds; // 🔥 Pegamos o fim EXATO do último clipe
  
      // 🔥 Inserir a Watermark na trilha 3 ou na última trilha disponível
      var watermarkClip = watermarkTrack.insertClip(watermarkItem, startPosition);
      if (!watermarkClip) {
        return "❌ Erro ao inserir a Watermark na timeline.";
      }
  
      // 🔥 Ajustar a duração da Watermark manualmente
      watermarkClip.end = endPosition; // 🔥 Ajusta para cobrir todo o vídeo
  
      return "✅ Watermark adicionada na Track 3, cobrindo todo o vídeo!";
    } catch (e) {
      return "Erro inesperado: " + e.toString();
    }
  }
  
  // 🔥 Função para encontrar ou importar um arquivo corretamente
  function findOrImportFile(fileName, fileObject) {
    var item = findItemInProject(fileName);
    if (!item) {
      app.project.importFiles(
        [fileObject.fsName],
        true,
        app.project.rootItem,
        false
      );
      $.sleep(500); // 🔥 Pequeno delay para garantir que a importação foi concluída
      item = findItemInProject(fileName);
    }
    return item;
  }
  
  // 🔥 Função auxiliar para encontrar um arquivo no projeto
  function findItemInProject(name) {
    var rootItem = app.project.rootItem;
    var numItems = rootItem.children.numItems;
  
    for (var i = 0; i < numItems; i++) {
      var item = rootItem.children[i];
      if (item && item.name === name) {
        return item;
      }
    }
    return null;
  }
  